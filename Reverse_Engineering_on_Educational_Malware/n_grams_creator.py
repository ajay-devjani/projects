# Details:
# Written by: Ajay Devjani, M.Tech INSE
# Project Co-partner: Rushaan Qureshi, M.Tech INSE
# Supervised by Prof: Makan Pourzandi

# Importing the libraries
import logging
import os


# Function definition to create n-gram dataset from all files in "outputs" folder.
# Generated dataset is provided as input to all classifiers.
# Input: size: Specifies size of n-gram.
# Output: "training_<<n-gram size>>_gram.txt" in "training" folder.
def create_n_grams(size=3):
    n_gram = []
    path = os.path.join(os.getcwd(), "outputs")
    # Open every file in "outputs" folder.
    for file in os.listdir(path):
        if file.endswith("_seq.txt"):
            try:
                fp = open(os.path.join(path, file), "r", encoding="utf-8")
                file_content = fp.readlines()
                fp.close()
            except:
                print("Error in reading file: " + file)
                logging.error("Error in reading file: " + file)
                return False

            is_first = True
            # Define first line of file as 0 if benign or 1 if malware.
            for line in file_content:
                if is_first:
                    isMalware = str(line)
                    is_first = False
                line = line.replace("\n", "")
                funcs = line.split("|")
                # Padding with __Nan__ if API calls sequence is less than n-gram size to
                # maintain uniformity in input CSV.
                if line == '':
                    continue
                if len(funcs) < size:
                    for i in range(size - len(funcs)):
                        line = line + "|__NaN__"
                    n_gram.append(''.join(line).strip() + "," + isMalware)
                    continue
                f = ''
                # Creating n-grams according to size. All API calls are separated by bar("|").
                for i in range(len(funcs)):
                    if i == len(funcs) - size + 1:
                        break
                    for k in range(size - 1):
                        f = f + funcs[i + k] + "|"
                    f = f + funcs[i + k + 1] + ","
                    n_gram.append(f + isMalware)
                    f = ''

    # Write the n-grams in "training_<<n-gram size>>_gram.txt" in "training" folder.
    try:
        with open("./training/training_" + str(size) + "_gram.txt", "w+", encoding="utf-8") as n_gram_writer:
            for line in n_gram:
                # print(line)
                n_gram_writer.write(str(line))
        n_gram_writer.close()
        print("Writing in training_" + str(size) + "_gram.txt successful..")
        logging.info("Writing in training_" + str(size) + "_gram.txt successful..")
    except Exception as ex:
        print("Error in writing training file." + str(ex))
        logging.error("Error in writing training file." + str(ex))
