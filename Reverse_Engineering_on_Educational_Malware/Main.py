# Code Stats:
# Written by: Ajay Devjani, M.Tech INSE
# Project Co-partner: Rushaan Qureshi, M.Tech INSE
# Course: ENGR 6991: "5-Credits Project"
# Prof: Makan Pourzandi
# Concordia Session: Summer 2022
import fnmatch
# Importing the libraries
# Below are libraries.
import logging
import os
import time
import xlsxwriter

# Below are user defined python files
from reverse_engineering.decision_trees import decision_tree
from reverse_engineering.dynamic_csv_txt import dynamic_csv_to_txt
from reverse_engineering.log2stats import log2stats
from reverse_engineering.n_grams_creator import create_n_grams
from reverse_engineering.naive import gaussian_naive
from reverse_engineering.random_forest import random_forest
from reverse_engineering.svm import linear_svm


# Function to export the Accuracy Report to Excel workbook.
# Input: static_data: List of accuracies of Static Analysis (consists of all Classifiers, n-grams and folds).
# Input: dynamic_data: List of accuracies of Dynamic Analysis (consists of all Classifiers, n-grams and folds).
# Output: Excel workbook named "Accuracy Report.xlsx" in working directory.
def export_to_excel(static_data, dynamic_data):
    # Open the Excel Workbook.
    # It'll truncate everything and re-write everything everytime.
    workbook = xlsxwriter.Workbook('Accuracy Report.xlsx')

    # Define the formatting of headers and normal cells in Excel workbook.
    cell_format = workbook.add_format()
    cell_format.set_bold()
    cell_format.set_border()
    cell_format_head = workbook.add_format()
    cell_format_head.set_bold()
    cell_format_head.set_border()
    normal_format = workbook.add_format()
    normal_format.set_border()

    for i in [0, 1, 2]:  # Here [0,1,2] represents loop for n-grams.
        # Create sheet of each n-gram.
        sheet = workbook.add_worksheet(str(i + 3) + '-Grams')
        sheet.set_column(1, 6, len('Random Forest  '))
        sheet.write('C3', 'No Fold', cell_format)
        sheet.write('D3', '5-Fold', cell_format)
        sheet.write('E3', '10-Fold', cell_format)
        sheet.write('F3', '20-Fold', cell_format)
        sheet.write('B3', '', cell_format)
        sheet.write('B4', 'Naive Bayes', cell_format)
        sheet.write('B5', 'SVM', cell_format)
        sheet.write('B6', 'Decision Tree', cell_format)
        sheet.write('B7', 'Random Forest', cell_format)

        sheet.write('C11', 'No Fold', cell_format)
        sheet.write('D11', '5-Fold', cell_format)
        sheet.write('E11', '10-Fold', cell_format)
        sheet.write('F11', '20-Fold', cell_format)
        sheet.write('B11', '', cell_format)
        sheet.write('B12', 'Naive Bayes', cell_format)
        sheet.write('B13', 'SVM', cell_format)
        sheet.write('B14', 'Decision Tree', cell_format)
        sheet.write('B15', 'Random Forest', cell_format)

        cell_format_head.set_bg_color('#95B3D7')
        cell_format_head.set_align('center')
        cell_format_head.set_align('vcenter')
        sheet.merge_range('B2:F2', 'STATIC ANALYSIS', cell_format_head)
        sheet.merge_range('B10:F10', 'DYNAMIC ANALYSIS', cell_format_head)

        # Writing down static and dynamic accuracies in Excel workbook in respective sheets.
        for k in range(4):
            sheet.write(3, k + 2, str(round(static_data[i][0][k], 6)), normal_format)
        for k in range(4):
            sheet.write(4, k + 2, str(round(static_data[i][1][k], 6)), normal_format)
        for k in range(4):
            sheet.write(5, k + 2, str(round(static_data[i][2][k], 6)), normal_format)
        for k in range(4):
            sheet.write(6, k + 2, str(round(static_data[i][3][k], 6)), normal_format)

        for k in range(4):
            sheet.write(11, k + 2, str(round(dynamic_data[i][0][k], 6)), normal_format)
        for k in range(4):
            sheet.write(12, k + 2, str(round(dynamic_data[i][1][k], 6)), normal_format)
        for k in range(4):
            sheet.write(13, k + 2, str(round(dynamic_data[i][2][k], 6)), normal_format)
        for k in range(4):
            sheet.write(14, k + 2, str(round(dynamic_data[i][3][k], 6)), normal_format)

    workbook.close()


# Below code will execute as "main".
if __name__ == "__main__":
    start_time = time.time()
    # Below function call will create txts from IDA logs in Output folder.
    log2stats()
    static_data = []
    dynamic_data = []
    # Logger for logging activities.
    logging.basicConfig(filename='reverse_engineering.log', level=logging.INFO)
    for size in range(3, 6):
        # Below function call will create n-grams from Output txts generated above.
        # It'll merge all the n-grams in single txt with name: "training_<<n-gram size>>_gram.txt"
        # in "training" folder.
        # Please refer specific python file for more details.
        create_n_grams(size)
        # It'll generate single txt from Cuckoo logs.
        # Please refer specific python file for more details.
        dynamic_csv_to_txt(size)
        # Invoking specific classifier for static and dynamic analysis.
        # Please refer specific python file for more details.
        static_col = [gaussian_naive(size), linear_svm(size), decision_tree(size),
                      random_forest(size)]
        dynamic_col = [gaussian_naive(size, True), linear_svm(size, True), decision_tree(size, True),
                       random_forest(size, True)]
        # Below is sample data if you don't want to run the classifiers.
        # var = round(size * 100.0, 6)
        # static_col = [[var + 77.972219, var + 78.135029, var + 78.135028, var + 78.135027],
        #               [var + 85.780535, var + 86.023655, var + 86.151778, var + 85.662724],
        #               [var + 85.780535, var + 86.023655, var + 86.151778, var + 85.662724],
        #               [var + 85.662724, var + 85.780535, var + 86.023655, var + 86.151778]]
        # # static_col = [round(x, 6) for x in static_col]
        # var = var + 1000.0
        # dynamic_col = [[var + 77.972219, var + 78.135029, var + 78.135028, var + 78.135027],
        #                [var + 85.780535, var + 86.023655, var + 86.151778, var + 85.662724],
        #                [var + 85.780535, var + 86.023655, var + 86.151778, var + 85.662724],
        #                [var + 85.662724, var + 85.780535, var + 86.023655, var + 86.151778]]
        static_data.append(static_col)
        dynamic_data.append(dynamic_col)

    export_to_excel(static_data, dynamic_data)
    print("Static Analysis: Benign: " + str(len(fnmatch.filter(os.listdir("./inputs/benign"), '*.*'))) +
          "Files and Malware: " + str(len(fnmatch.filter(os.listdir("./inputs/benign"), '*.*'))) +
          " Files.\n")
    print("Dynamic Analysis: Benign: " + str(len(fnmatch.filter(os.listdir("./cuckoo_inputs/b_calls"), '*.*'))) +
          "Files and Malware: " + str(len(fnmatch.filter(os.listdir("./cuckoo_inputs/m_calls"), '*.*'))) +
          " Files.\n")
    logging.info("Static Analysis: Benign: " + str(len(fnmatch.filter(os.listdir("./inputs/benign"), '*.*'))) +
                 "Files and Malware: " + str(len(fnmatch.filter(os.listdir("./inputs/benign"), '*.*'))) +
                 " Files.\n")
    logging.info("Dynamic Analysis: Benign: " + str(len(fnmatch.filter(os.listdir("./cuckoo_inputs/b_calls"), '*.*'))) +
                 "Files and Malware: " + str(len(fnmatch.filter(os.listdir("./cuckoo_inputs/m_calls"), '*.*'))) +
                 " Files.\n")
    logging.info("Execution Time: %s seconds." % (time.time() - start_time))

